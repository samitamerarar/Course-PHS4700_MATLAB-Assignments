function [acc] = Calculateaa(cabin,body,wingL, wingR,fin,motorL, motorR, va,pcm,Force_md,Force_mg,Force_p,MI,R2_1,R2_1T,posA)
%aa is the function that will pull out the angular accelaration 
%it takes in account all the other factors


%Create wWave matrix
wWave = [0,-va(3),va(2);
    va(3),0,-va(1);
    -va(2),va(1),0];

%identify the position and the direction of the native force
posForce_md = [5,body.r+motorR.r,body.r+wingL.e];%-nose;
dirForce_md = [1,0,0];
posForce_mg = [5,-(motorR.r+body.r),body.r+wingL.e];%-nose;
dirForce_mg = [1,0,0];
posForce_p =  [10.54,0,0];%-nose;
dirForce_p = [0,0,1];

%Rotate everything to put it in the angle that we are looking at
wWave_R = wWave;%R2_1*wWave*R2_1T;
dirForce_md_R = dirForce_md;%R2_1*transpose(dirForce_md);
dirForce_mg_R = dirForce_mg;%R2_1*transpose(dirForce_mg);
posForce_md_R = posForce_md;%R2_1*transpose(posForce_md)+moveNose;
posForce_mg_R = posForce_mg;%R2_1*transpose(posForce_mg)+moveNose;
posForce_p_R = posForce_p;%R2_1*transpose(posForce_p)+moveNose;
va_R = va;%R2_1*transpose(va);

%Create the force matrix from the force value and the rotated position
posForce_mg_R = R2_1*transpose(posForce_mg_R-pcm);
posForce_md_R = R2_1*transpose(posForce_md_R-pcm);
posForce_p_R = R2_1*transpose(posForce_p_R-pcm);

%Calculate the matrix of the force with it's direction
matForce_md = R2_1*transpose((dirForce_md_R*Force_md));
matForce_mg = R2_1*transpose((dirForce_mg_R*Force_mg));
matForce_p = transpose((dirForce_p*Force_p));

%Calculate the torque of the force on the mass center

toMotorL = [posForce_mg_R(2)*matForce_mg(3)-posForce_mg_R(3)*matForce_mg(2),posForce_mg_R(1)*matForce_mg(3)-posForce_mg_R(3)*matForce_mg(1),posForce_mg_R(1)*matForce_mg(2)-posForce_mg_R(2)*matForce_mg(1)]
toMotorR = [posForce_md_R(2)*matForce_md(3)-posForce_md_R(3)*matForce_md(2),posForce_md_R(1)*matForce_md(3)-posForce_md_R(3)*matForce_md(1),posForce_md_R(1)*matForce_md(2)-posForce_md_R(2)*matForce_md(1)]
toPush = [posForce_p_R(2)*matForce_p(3)-posForce_p_R(3)*matForce_p(2),posForce_p_R(1)*matForce_p(3)-posForce_p_R(3)*matForce_p(1),posForce_p_R(1)*matForce_p(2)-posForce_p_R(2)*matForce_p(1)]
testToL = torqueTo(matForce_mg,posForce_mg_R)
testToR = torqueTo(matForce_mg,posForce_mg_R)
testToPush = torqueTo(matForce_mg,posForce_mg_R)
%Sum the torque on the mass center
totalTo = toMotorR + toMotorL + toPush;

%Retrieve the angular acceleration matrix
acc = (R2_1*MI*R2_1T)\(transpose(totalTo)-wWave_R*R2_1*MI*R2_1T*transpose(va_R));
%Retrive the angular accelaration for each axes


end


function to = torqueTo(matForce,posForce)
%calculate the torque from the force, the foce position and mass center
%
to = [posForce(2)*matForce(3)-posForce(3)*matForce(2),posForce(1)*matForce(3)-posForce(3)*matForce(1),posForce(1)*matForce(2)-posForce(2)*matForce(1)];

end